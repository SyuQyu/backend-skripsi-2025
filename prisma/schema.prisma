generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // url      = env("DATABASE_PROD_URL")
    // url      = env("DATABASE_URL")
    url      = env("DATABASE_PROD_URL_NEW")
}

model ListGoodWords {
    id        String       @id @default(cuid())
    word      String
    badWordId String
    badWord   ListBadWords @relation(fields: [badWordId], references: [id], onDelete: Cascade)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @default(now()) @updatedAt
}

model ListBadWords {
    id        String          @id @default(cuid())
    word      String
    goodWords ListGoodWords[]
    createdAt DateTime        @default(now())
    updatedAt DateTime        @default(now()) @updatedAt
}

model Role {
    id        String   @id @default(cuid())
    name      String
    users     User[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model User {
    id                String         @id @default(cuid())
    roleId            String
    role              Role           @relation(fields: [roleId], references: [id])
    fullName          String?
    username          String         @unique
    email             String         @unique
    password          String
    // phone             String?
    // nim               String?
    // faculty           String?
    // gender            String?
    firstLogin        Boolean        @default(false)
    profilePicture    String? // URL or path to the user's profile picture
    backgroundPicture String? // URL or path to the user's background picture
    refreshToken      String? // Menyimpan refresh token untuk autentikasi
    posts             Post[]
    replies           Reply[]
    reports           Report[]
    likes             Like[]
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @default(now()) @updatedAt
    postView          PostView[]
    replyView         ReplyView[]
    Notification      Notification[]
}

model CommonWord {
    id        Int      @id @default(autoincrement())
    word      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Tag {
    id        String     @id @default(cuid())
    tag       String     @unique
    posts     PostTag[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    ReplyTag  ReplyTag[]
}

model Post {
    id                      String     @id @default(cuid())
    userId                  String
    content                 String
    filteredContent         String?
    durationFilteredContent Int?
    user                    User       @relation(fields: [userId], references: [id])
    tags                    PostTag[]
    replies                 Reply[]
    images                  Image[]
    likes                   Like[]
    reports                 Report[]
    createdAt               DateTime   @default(now())
    updatedAt               DateTime   @default(now()) @updatedAt
    postView                PostView[]
}

model PostView {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([postId, userId]) // pastikan 1 user hanya bisa view 1 kali per post
}

model PostTag {
    postId    String
    tagId     String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    tag       Tag      @relation(fields: [tagId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@id([postId, tagId]) // Composite key agar tidak ada duplikasi
}

model Reply {
    id                      String      @id @default(uuid())
    content                 String
    userId                  String
    postId                  String
    filteredContent         String?
    durationFilteredContent Int?
    user                    User        @relation(fields: [userId], references: [id])
    post                    Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
    replies                 Reply[]     @relation("ReplyToReply")
    parentId                String?     @map("replyId")
    parent                  Reply?      @relation("ReplyToReply", fields: [parentId], references: [id])
    images                  Image[]
    likes                   Like[]
    reports                 Report[]
    tags                    ReplyTag[] // Relasi ke tabel ReplyTag
    createdAt               DateTime    @default(now())
    updatedAt               DateTime    @default(now()) @updatedAt
    replyView               ReplyView[]
}

model ReplyView {
    id        String   @id @default(cuid())
    replyId   String
    userId    String
    reply     Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([replyId, userId]) // satu user hanya bisa view satu kali per reply
}

model ReplyTag {
    replyId   String
    tagId     String
    reply     Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
    tag       Tag      @relation(fields: [tagId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@id([replyId, tagId]) // Composite key agar tidak ada duplikasi
}

model Image {
    id        String   @id @default(cuid())
    postId    String?
    replyId   String?
    imageUrl  String
    post      Post?    @relation(fields: [postId], references: [id])
    reply     Reply?   @relation(fields: [replyId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    postId    String?
    replyId   String?
    user      User     @relation(fields: [userId], references: [id])
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Report {
    id                String   @id @default(cuid())
    postId            String?
    replyId           String?
    userId            String
    violationCategory String
    message           String
    post              Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    reply             Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type      String
    message   String
    postId    String?
    replyId   String?
    url       String? // <--- tambahkan ini
    createdAt DateTime @default(now())
    isRead    Boolean  @default(false)
}
