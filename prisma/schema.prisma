generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ListGoodWords {
    id        String       @id @default(cuid())
    word      String
    badWordId String
    badWord   ListBadWords @relation(fields: [badWordId], references: [id])
}

model ListBadWords {
    id        String          @id @default(cuid())
    word      String
    goodWords ListGoodWords[]
}

model Role {
    id    String @id @default(cuid())
    name  String
    users User[]
}

model User {
    id             String   @id @default(cuid())
    roleId         String
    role           Role     @relation(fields: [roleId], references: [id])
    fullName       String
    username       String   @unique
    email          String   @unique
    password       String
    phone          String?
    nim            String?
    faculty        String?
    gender         String?
    firstLogin     Boolean  @default(false)
    profilePicture String?
    posts          Post[]
    replies        Reply[]
    reports        Report[]
    likes          Like[]
}

model Tag {
    id    String @id @default(cuid())
    tag   String
    posts Post[]
}

model Post {
    id              String   @id @default(cuid())
    tagId           String
    userId          String
    content         String
    filteredContent String?
    viewCount       Int      @default(0)
    user            User     @relation(fields: [userId], references: [id])
    tag             Tag      @relation(fields: [tagId], references: [id])
    replies         Reply[]
    images          Image[]
    likes           Like[]
    reports         Report[]
}

model Reply {
    id              String   @id @default(cuid())
    postId          String
    replyId         String? // Optional parent reply
    userId          String
    content         String
    filteredContent String?
    post            Post     @relation(fields: [postId], references: [id])
    user            User     @relation(fields: [userId], references: [id])
    images          Image[]
    likes           Like[]
    reports         Report[]
}

model Image {
    id       String  @id @default(cuid())
    postId   String?
    replyId  String?
    imageUrl String
    post     Post?   @relation(fields: [postId], references: [id])
    reply    Reply?  @relation(fields: [replyId], references: [id])
}

model Like {
    id      String  @id @default(cuid())
    userId  String
    postId  String?
    replyId String?
    user    User    @relation(fields: [userId], references: [id])
    post    Post?   @relation(fields: [postId], references: [id])
    reply   Reply?  @relation(fields: [replyId], references: [id])
}

model Report {
    id                String  @id @default(cuid())
    postId            String?
    replyId           String?
    userId            String
    violationCategory String
    message           String
    post              Post?   @relation(fields: [postId], references: [id])
    reply             Reply?  @relation(fields: [replyId], references: [id])
    user              User    @relation(fields: [userId], references: [id])
}
